#!/usr/bin/env perl
use 5.024;
use warnings;
use experimental qw< postderef signatures >;
no warnings qw< experimental::postderef experimental::signatures >;
use Pod::Usage qw< pod2usage >;
use Getopt::Long qw< :config gnu_getopt >;
use POSIX 'strftime';
use FindBin '$Bin';
use lib "$Bin/local/lib/perl5";
use autodie ':default';
use Path::Tiny;
use Curses::UI;
use Curses;
use YAML qw< LoadFile Dump >;
use Data::Dumper;
$Data::Dumper::Indent = 1;

my $VERSION = '0.1';

my $ts = strftime('%Y%m%d-%H%M%S', localtime);
my %config = (
   commands      => 'commands.usc',
   commands_dir  => '',
   compat        => 1,
   editor_height => 4,
   env           => undef,
   history       => "useshowcase-history-$ts.txt",
   shell         => '/bin/sh',
);
GetOptions(
   \%config,
   qw<
     usage! help! man! version!
     commands|c=s
     commands_dir|commands-dir|d=s
     compat!
     editor_height|editor-height|E=i
     env|env-file|e=s
     history|H=s
     shell|s=s
     >
) or pod2usage(-verbose => 99, -sections => 'USAGE');
pod2usage(message => "$0 $VERSION", -verbose => 99, -sections => ' ')
  if $config{version};
pod2usage(-verbose => 99, -sections => 'USAGE') if $config{usage};
pod2usage(-verbose => 99, -sections => 'USAGE|EXAMPLES|OPTIONS')
  if $config{help};
pod2usage(-verbose => 2) if $config{man};

$config{editor_height} += 2;    # consider the border...
$config{env} //= path($config{commands_dir})->child('env')
   if path($config{commands_dir});

my $commands = [];
push $commands->@*, read_commands($config{commands})
  if -r $config{commands};
push $commands->@*, acquire_commands($config{commands_dir})
  if -d $config{commands_dir};
push $commands->@*, default_commands(\%config);

my $buttons_height = 0;

my $cui = Curses::UI->new(
   -color_support => 1,
   -compat        => $config{compat},
);
my $win = $cui->add('window_id', 'Window');

my ($editor, $list, $buttons, @history);
$list = $win->add(
   'mylistbox',
   'Listbox',
   -htmltext => 1,
   -height   => $win->height - $config{editor_height} - $buttons_height,
   -border   => 1,
   -values   => [0 .. $#$commands],
   -labels   => {map { $_ => $commands->[$_]{label} } 0 .. $#$commands},
   -onchange => sub ($lb) {
      my $i      = $lb->get;
      my $item   = $commands->[$i];
      my $action = $item->{action};

      if ($action eq 'quit') { exit 0 }
      elsif ($action eq 'save-history') {
         open my $fh, '>', $config{history};
         for my $i (0 .. $#history) {
            say {$fh} '# ', $i + 1, ' ', '#' x (69 - length $i);
            say {$fh} $history[$i];
         }
         close $fh;
      } ## end elsif ($action eq 'save-history')
      elsif ($action eq 'save') {
         save_commands($commands);
      }
      elsif ($action eq 'execute') {
         (my $has_env = $config{env}{command}) =~ s{\s+}{}gmxs;
         my $cmd = ($has_env ? $config{env}{command} . "\n" : '')
            . $item->{command};
         push @history, $cmd;
         $cui->leave_curses;
         say '#' x 72;
         say "# $_" for split m{\n}mxs, $cmd;
         say '#' x 42;
         system $config{shell}, '-c', $cmd;
         scalar <STDIN>;
         $cui->reset_curses;
      } ## end elsif ($action eq 'execute')
      elsif ($action eq 'separator') { }
      elsif ($action eq 'env') { }
      else {
         die "unsupported command\n";
      }
      $lb->clear_selection;
   },
   -onselchange => sub ($lb) {
      my $line = eval { $commands->[$lb->get_active_id] };
      $editor->text(displayable_command($line));
   },
   -onfocus => sub ($lb) {
      my $line = eval { $commands->[$lb->get_active_id] };
      if ($line->{action} eq 'env') { # should I update the env file?
         if ($line->{command} ne $line->{previous}) {
            save_file($line->{path}, $line->{command});
            $line->{previous} = $line->{command};
         }
      }
   },
   -wraparound => 1,
);
$list->set_binding(sub { exit 0 }, 'q', 'Q');
$editor = $win->add(
   'myeditor',
   'TextEditor',
   -text   => displayable_command($commands->[0]),
   -y      => $win->height - $config{editor_height} - $buttons_height,
   -height => $config{editor_height},
   -border => 1,
   -onfocus => sub ($ed) {
      my $line = eval { $commands->[$list->get_active_id] };
      $list->focus unless grep {$line->{action} eq $_} qw< env execute >;
   },
   -onblur => sub ($ed) {
      my $index   = $list->get_active_id;
      my $command = $commands->[$index];
      if ($command->{action} eq 'execute') {
         $command->{command} = $ed->get;
      }
      elsif ($command->{action} eq 'env') {
         for ($command->{command}) {
            $_ = $ed->get // '';
            $_ .= "\n" if length $_ < 1 || substr($_, -1, 1) ne "\n";
         }
      }
   },
);

#$buttons = $win->add('mybuttons', 'Buttonbox',
#   -border => 1,
#   -y => $win->height - 3,
#   -buttons => [
#      { -label => 'Quit', -value => 'quit' },
#      { -label => 'Save History', -value => 'save-history' },
#      { -label => 'Save', -value => 'save' },
#   ]
#);
$list->focus;
$cui->mainloop;
exit 0;

sub displayable_command ($command) {
   return '' unless grep { $command->{action} eq $_ } qw< env execute >;
   return $command->{command};
}

sub normalize_command ($item, %additions) {
   if (scalar(keys $item->%*) == 1) {    # normalize...
      my ($label, $command) = $item->%*;
      $item = {
         label   => $label,
         action  => 'execute',
         command => $command,
      };
   } ## end if (scalar(keys $item->...))
   $item->%* = ($item->%*, %additions);
   $item->{previous} = $item->{command} if exists $item->{command};
   return $item;
} ## end sub normalize_command

sub read_commands ($filename) {
   $filename = \*STDIN if $filename eq '-';
   my $commands = LoadFile($filename);
   $filename = ref($filename) eq 'GLOB' ? undef : path($filename);
   return
     map { normalize_command($_, src => 'yaml', path => $filename) }
     $commands->@*;
} ## end sub read_commands ($filename)

sub save_commands ($commands) {
   my (@to_yaml, $save_yaml);
   for my $command ($commands->@*) {
      my $src = $command->{src} //= 'ignore';
      if ($src eq 'yaml') {
         push @to_yaml, {$command->{label} => $command->{command}};
         ($command->{previous}, $save_yaml) =
           $command->@{qw< command path >}
           if $command->{previous} ne $command->{command};
      } ## end if ($src eq 'yaml')
      elsif ($src eq 'script') {
         if ($command->{previous} ne $command->{command}) {
            save_file($command->{path}, $command->{command});
            $command->{previous} = $command->{command};
         }
      } ## end elsif ($src eq 'script')
   } ## end for my $command ($commands...)
   save_file($save_yaml, Dump(\@to_yaml));

   return;
} ## end sub save_commands ($commands)

sub save_file ($path, $contents) {
   return unless defined $path;
   my $tmp = path($path . '.new');
   $tmp->spew($contents);
   $tmp->move($path);
   return;
} ## end sub save_file

sub acquire_commands ($dirname) {
   map {
      if (!$_->is_dir && m{\.sh$}mxs) {
         (my $label = $_->basename) =~ s{\A\d+[-\s]|\.sh\z}{}gmxs;
         normalize_command(
            {
               label   => $label,
               action  => 'execute',
               command => $_->slurp,
               src     => 'script',
               path    => $_,
            }
         );
      } ## end if (!$_->is_dir && m{\.sh$}mxs)
      else { () }
   } sort {$a cmp $b} path($dirname)->children;
} ## end sub acquire_commands ($dirname)

sub default_commands ($config) {
   my $env = path($config->{env} // Path::Tiny->tempfile);
   $env->touch;
   $config->{env} = {
      label => 'common environment',
      action => 'env',
      path   => $env,
      command => $env->slurp,
   };
   return map {
      $_->{label} = "<bold>$_->{label}</bold>"
        if length $_->{label};
      normalize_command($_)
   } (
      {label => '',                           action => 'separator'},
      $config->{env},
      {label => 'save history',               action => 'save-history'},
      {label => 'save updated commands file', action => 'save'},
      {label => '[q]uit',                     action => 'quit'},
   );
} ## end sub default_commands

__END__

=encoding UTF-8

=head1 NAME

useshowcase - showcase use cases

=head1 USAGE

   useshowcase [--usage] [--help] [--man] [--version]

   useshowcase [-c|--commands filename]
               [-d|--commands-dir dirname]
               [--no-compat]
               [-e|--env|--env-file filename]
               [-E|--editor-height integer]
               [-H|--history filename]
               [-s|--shell filename]

=head1 EXAMPLES

   $ useshowcase -c my-commands.yml -d other-commands/ -s /bin/bash

=head1 DESCRIPTION

This program allows you easily access a few pre-defined shell commands or
groups of commands that you might want to run for showing a few use cases.
This is meant as an improvement over repeated usage of the command history
in this specific cases, as well as a way to provide a label to the actions
that you execute and make your audience follow you in some easier way.

=head2 Commands File

Commands to be shown in the list can be taken from a YAML file, by default
C<commands.usc> (no error is raised if this file is missing). The file can
be set with option C<-c|--commands>.

This is a YAML file with a very simple structure:

=over

=item *

the top level is an array

=item *

each entry in the array is an object with a single key/value pair, where
the key is the labe shown in the list of commands, and the value is the
actual command that will be run.

=back

Example:

   ---
   - 'contents of root, by date descending': ls -lart /
   - 'some trivial message': echo 'what to do about this'

=head2 Commands Directory

In addition to a L</Commands File>, you can also put your commands inside
a directory. This directory can be set with option C<-d|--commands-dir>.

Each file in the directory ending in C<.sh> will be considered a command
to include in the list. The label in the list will be derived from the
filename:

=over

=item *

An initial sequence of digits and a following dash or space character are
removed. This allows you to set an order in which you want to show the
commands in the list.

=item *

the trailing C<.sh> is removed.

=back

=head2 Environment File

You can optionally designate a file to contain environment variables.
Actually, it can contain any command. When it has contents, it will be
pre-pended to the execution of any command.

You can set it with option C<-e|--env>.

=head2 Shell

The defaut shell that is invoked to run commands is C</bin/sh>, you can
set a different one with C<-s|--shell>. Whatever you select, it must
support running commands as a single string provided through the C<-c>
command line option.

=head2 Practical Usage

When you start C<useshowcase>, it will initially load commands from either
a file or a directory (or both), then show you a window with two parts:

=over

=item *

the list of commands and generic actions that can be performed

=item *

an editor for commands

=back

Use arrow keys to move in the list; use the I<Tab> key to switch to the
editor and then back to the list.

When an item is selected on the list, the associated command is shown in
the editor. Pressing I<Enter> will run the command (pre-pending the
environment if it is not empty).

You can edit commands by hitting the I<Tab> key; in this case, the command
that will be executed is the one you modified. You can set the editor's
height via command-line option C<-E|--editor-height>.

If you want to save your changes, use the relevant line in the list.
Changes to the environment are always saved automatically.

You can also save the full history of commands you run in a file, use the
relevant line in the list. The filename can be set using the
C<-H|--history> option; by default a name based on the timestamp is
generated automatically.

=head2 Compatibility Mode

By default, the program is run in I<compatibility mode>, which means that
the borders around the sub-windows are pretty basic. You can disable this
mode using option C<--no-compat>, just avoid it if you see that the
borders are garbled.

=head1 OPTIONS

=over

=item C<-c|--commands filename>

set name of YAML file to take commands from. By default it is
C<commands.usc>.

=item C<-d|--commands-dir dirname>

set name of directory to take commands from.

=item C<--no-compat>

disable compatibility mode and try to show better window borders.

=item C<-e|--env|--env-file filename>

set filename of the environment file. If not present, a temporary file
will be created and removed upon exit. By default, if the
C<-d|--commands-dir> option is provided, file named C<env> inside that
directory is considered.

=item C<-E|--editor-height integer>

set height of the editor section in the user interface.

=item C<-H|--history filename>

set the name of a file to save history, when requested. By default a file
name is generated based on the timestamp at the beginning of the program.

=item C<-s|--shell filename>

set the shell to use, by default C</bin/sh>. The shell MUST support the
C<-c> option.

=back

=head1 DEPENDENCIES

See associated C<cpanfile> in repository at
https://github.com/polettix/usecaseshow

=head1 BUGS AND LIMITATIONS

Please report any bugs or feature requests through
https://github.com/polettix/usecaseshow

=head1 AUTHOR

Flavio Poletti C<flavio@polettix.it>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2019 Flavio Poletti C<flavio@polettix.it>.

This program is free software.  You can redistribute it and/or modify it
under the terms of the Artistic License 2.0.

This program is distributed in the hope that it will be useful,
but without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut
